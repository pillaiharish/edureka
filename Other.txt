MVC Architecture in Java

Design Pattern, in software engineering, is a technique to solve a commonly occurring problem when designing software.

Designing Model, specifies what type of architecture we use to solve the problem or design the model. There are two types of design models: Model 1 Architecture, Model 2(MVC) Architecture.

MVC Architecture in Java
Model designs based on MVC architecture follow the MVC design pattern and they separate the application logic from the user interface when designing software. 
Model – Represents the business layer of the application
View – Defines the presentation of the application
Controller – Manages the flow of the application

In Java Programming context, the Model consists of simple Java classes, the View displays the data and the Controller consists of servlets

JavaBeans

JavaBeans is a portable, platform-independent model written in Java Programming Language. Its components are referred to as beans. It helps in accessing these object from multiple places.   A JavaBean is a software component that has been designed to be reusable in a variety of environments. JavaBeans are classes which encapsulate several objects into a single object. JavaBeans contains several elements like Constructors, Getter/Setter Methods and much more.

JavaBeans has several conventions that should be followed:
Beans should have a default constructor (no arguments)
Beans should provide getter and setter methods
Beans should implement java.io.serializable, as it allows to save, store and restore the state of a JavaBean we are working on.

JavaBean features are accessed through two methods getter  and setter ,their properties are given below :
Must be public in nature
Return-type should not be void
The getter method should be prefixed with the word get and The setter method has to be prefixed with the word set
Getter should not take any argument and Setter should take some argument

Advantages of JavaBeans
Portable : JavaBeans components are built purely in Java and portable to any platform that supports the Java Run-Time Environment. Support for JavaBeans are implemented by the JVM.
Compact and Easy : A bean is lightweight, so, it doesn’t have to carry around a lot of inherited baggage to support the Beans environment.
Carries the Strengths of the Java Platform : JavaBeans is pretty compatible, there isn’t any new complicated mechanism for registering components with the run-time system

Disadvantages of JavaBeans
JavaBeans are mutable, hence lack the advantages offered by immutable objects.
JavaBeans will be in inconsistent state partway through its construction.

Java Web Services

Web service is an appropriate medium to propagate communication between the client and server applications on the World Wide Web. It is a software module which is designed to perform a certain set of tasks as follows:
The web services can be searched for over the network and can also be invoked accordingly.
When invoked the web service would be able to provide the functionality to the client which invokes that web service.

Advantages of Web Services

Exposing Business Functionality on the network – A web service is a managed code unit that provides some sort of functionality to client applications or end-users. This functionality can be invoked over the HTTP protocol which means that it can also be invoked over the internet. Web services can be used anywhere on the internet and provide the necessary functionality as required.

Interoperability amongst applications – Web services allow various applications to communicate with each other and share data and services among themselves.

A standardized Protocol which everybody understands – Web services use standardized industry protocol for the communication. All four layers (Service Transport, XML Messaging, Service Description, and Service Discovery layers) uses well-defined protocols in the web services protocol stack.

Reduction in cost of communication – Web services make use of SOAP over HTTP protocol, which lets us use our existing low-cost internet for implementing web services.

Types of Web Services : Generally, there are two types of web services as follows:

1. Soap Web Services : Simple Object Access Protocol (SOAP) is a standard protocol specification for message exchange based on XML. Communication between the web service and the client happens using XML messages. A simple web service architecture has two component: viz. Client and Service provider.
In order to communicate with the service provider the client must know information like, the Location of web services server, Functions available, signature and return types of function and input-output formats. The service provider will create a standard XML file which will have all these information. So, if this file is given to the client then it will be able to access web service

2. RESTful Web Services : Representational State Transfer (REST) is a stateless client-server architecture in which the web services are viewed as resources and can be identified by their URLs. It consists of two components REST server which provides access to the resources and a REST client which accesses and modify the REST resources.
In this REST architecture style, client and server exchange the representations of the resources by using a standardized interface and protocol. REST is not a specific protocol. The response from the server is considered as the representation of the resources. This representation can be generated from one or more number of resources. RESTful web services use HTTP protocol methods for the operations they perform. It includes methods like GET, POST, DELETE, etc.

Java Web Services API : There are two main API’s defined by Java for developing web service applications.

1. JAX-WS: It is mainly for SOAP web services. There are two ways to write JAX-WS application code: by RPC style and Document style.

2. JAX-RS: It is mainly for RESTful web services. There is mainly 2 implementation currently in use for creating JAX-RS application: Jersey and RESTeasy.

JAX-WS Example
 
import javax.jws.WebMethod;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.ws.Endpoint;
 
@WebService
@SOAPBinding(style = SOAPBinding.Style.DOCUMENT)
public class Demo {
 
@WebMethod
public String sayHello(String msg){
return "Hello "+msg;
}
 
public static void main(String[] args){
Endpoint.publish("http://localhost:8888/DemoWS", new Demo());
}
}

JAX-RS Example
 
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
 
@Path("/demo")
public class DemoWS {
 
@GET
@Path("/hello/{msg}")
public String sayHello(@PathParam(value="msg") String msg){
return "Hello "+msg;
}
}

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
<display-name>JAX-RS-HelloEdureka</display-name>
 
<servlet>
<servlet-name>Jersey REST Service</servlet-name>
<servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>
<init-param>
<param-name>com.sun.jersey.config.property.packages</param-name>
<param-value>com.Edureka.jaxrs.service</param-value>
</init-param>
<load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
<servlet-name>Jersey REST Service</servlet-name>
<url-pattern>/*</url-pattern>
</servlet-mapping>
</web-app>

Session In Java

The time interval in which two systems(i.e. the client and the server) communicate with each other can be termed as a session. In simpler terms, a session is a state consisting of several requests and response between the client and the server.

It is a known fact that HTTP and Web Servers are both stateless. Hence, the only way to maintain the state of the user is by making use of technologies that implement session tracking.
Session tracking in servlets can be implemented by a number of methods, cookies being one of them. However, they have multiple disadvantages:

Only textual information can be kept by them.
If cookies are disabled by a user, the web application is unable to make use of them.
Not more than 4kb of data can be contained by a single cookie.
Another way to implement session tracking is by creating sessions with unique session ids for every user in a java servlet

Http Session Interface : It is highly advantageous to use the HttpSessionInterface to achieve session tracking.

Advantages:

All kinds of objects, such as database and text can be stored into a session.
Sessions are secure.
Moving on with Disadvantages

Disadvantages:

Since the session object is stored on a server, there is performance overhead.
Serialization and de-serialization also lead to overhead.

Socket Programming in Java

Socket programming in Java is used for communication between the applications that are running on different JRE. It can be either connection-oriented or connectionless. On the whole, a socket is a way to establish a connection between a client and a server
Socket programming is a way of connecting two nodes on a network to communicate with each other. One socket (node) listens on a particular port at an IP, while other socket reaches out to the other in order to form a connection
The server forms the listener socket while the client reaches out to the server. Socket and Server Socket classes are used for connection-oriented socket programming.

Socket in Java : A socket in Java is one endpoint of a two-way communication link between two programs running on the network. A socket is bound to a port number so that the TCP layer can identify the application that data is destined to be sent to.

Client Side Programming :  Once the server is up and running, it will send the requests to the server. After that, the client will wait for the response from the server

1. Establish a Connection : To establish a socket connection. A socket connection implies that the two machines have information about each other’s network location (IP Address) & TCP port.
Socket socket = new Socket(“127.0.0.1”, 5000)

2. Communication : To communicate over a socket connection, streams are used for both input and output the data

3. Closing the connection

Server Side Programming : The server will instantiate its object and wait for the client request. Once the client sends the request, the server will communicate back with the response. 
To code the server-side application, we need two sockets and they are as follows:
A ServerSocket which waits for the client requests (when a client makes a new Socket())
A plain old socket for communication with the client

Communication : getOutputStream() method is used to send the output through the socket.

Close the Connection : It is important to close the connection by closing the socket as well as input/output streams once everything is done





